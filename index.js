import express from "express";
import cors from "cors";
import dotenv from "dotenv";
import { GoogleGenerativeAI } from "@google/generative-ai";

dotenv.config();

const app = express();
app.use(cors());
app.use(express.json());
// GET | http://localhost:3000/api/quote
// GET | http://localhost:3000/api/quote?topic=perseverance&mood=motivational&lang=en&max_words=18
// GET | http://localhost:3000/api/quote?topic=keepgoing&mood=happy&lang=en&max_words=18
// Example Topics: Success, Perseverance, Friendship, Love, Life, Dreams, Courage, Failure, Happiness, Change
// Example Moods: Motivational, Inspirational, Funny, Hopeful, Serious, Calm, Energetic, Reflective, Friendly, Spiritual


// Debug: do not print the key itself; just confirm it's present
console.log("API Key loaded:", process.env.GOOGLE_API_KEY ? "✔️ Found" : "❌ Missing");

const API_KEY = process.env.GOOGLE_API_KEY;
let model = null;

if (API_KEY) {
  try {
    const genAI = new GoogleGenerativeAI(API_KEY);
    model = genAI.getGenerativeModel({ model: "gemini-1.5-flash" });
  } catch (e) {
    console.error("Failed to initialize GoogleGenerativeAI:", e?.message ?? e);
  }
}

// Health check
app.get("/", (_req, res) => {
  res.json({ ok: true, name: "Gemini Quote API", endpoints: ["/api/quote"] });
});

// Main endpoint: GET /api/quote
app.get("/api/quote", async (req, res) => {
  if (!API_KEY || !model) {
    return res.status(502).json({
      error: "No valid GOOGLE_API_KEY configured. Add a valid key to .env and restart the server.",
    });
  }

  try {
    const {
      topic = "life",
      mood = "motivational",
      lang = "en",
      max_words = "20",
    } = req.query;

    const limit = Math.max(6, Math.min(parseInt(max_words, 10) || 20, 30));

    const prompt = `
You are a quote generator. Create ONE short, original quote in ${lang}.
Constraints:
- ${limit} words or fewer.
- Tone: ${mood}. Topic: ${topic}.
- No author name, no hashtags, no emojis, no quotation marks.
Output ONLY the quote text.
    `.trim();

    // Call Gemini
    const result = await model.generateContent(prompt);

    // Support both possible shapes: result.response.text() or result.text
    const text =
      (result?.response?.text?.() ?? result?.text ?? "")
        .toString()
        .trim()
        .replace(/^["“”']|["“”']$/g, "");

    if (!text) {
      return res.status(502).json({ error: "No quote generated by Gemini." });
    }

    res.json({
      quote: text,
      topic,
      mood,
      lang,
      words: text.split(/\s+/).filter(Boolean).length,
      source: "gemini-1.5-flash",
      created_at: new Date().toISOString(),
    });
  } catch (err) {
    console.error("Generation error:", err?.message ?? err);

    // Friendlier message for invalid API key error from Google
    if (
      err?.status === 400 &&
      Array.isArray(err?.errorDetails) &&
      err.errorDetails.some((d) => d.reason === "API_KEY_INVALID")
    ) {
      return res.status(401).json({ error: "API key invalid. Check GOOGLE_API_KEY in .env." });
    }

    res.status(500).json({ error: "Failed to generate quote", details: err?.message ?? String(err) });
  }
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`✅ Quote API running at http://localhost:${PORT}`));
